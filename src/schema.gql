# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type CategoriesOutput {
  categories: [Category!]
  error: String
  ok: Boolean!
}

type Category {
  coverImage: String
  createdAt: DateTime!
  deletedAt: DateTime
  id: UUID!
  name: String!
  restaurantCount: Int!
  restaurants: [Restaurant!]
  slug: String!
  updatedAt: DateTime!
}

input CategoryInput {
  categorySlug: String!
  page: Int = 1
  take: Int = 25
}

input CategoryInputType {
  coverImage: String
  name: String!
  restaurants: [RestaurantInputType!]
  slug: String!
}

type CategoryOutput {
  category: Category
  error: String
  ok: Boolean!
  restaurants: [Restaurant!]
  totalPages: Int
  totalResults: Int
}

type CookedOrdersOutput {
  order: Order
}

input CreateDishInput {
  description: String!
  name: String!
  options: [DishOptionInputType!]
  photo: String!
  price: Int!
  restaurantId: UUID!
}

type CreateDishOutput {
  dish: Dish
  error: String
  ok: Boolean!
}

input CreateOrderInput {
  createOrderInputItems: [CreateOrderInputItem!]!
  restaurantId: UUID!
}

input CreateOrderInputItem {
  dishId: UUID!
  dishOptionIds: [UUID!]
}

type CreateOrderOutput {
  error: String
  ok: Boolean!
  order: Order
}

input CreatePaymentInput {
  restaurantId: String
  transactionId: String!
}

type CreatePaymentOutput {
  error: String
  ok: Boolean!
  payment: Payment
}

input CreateRestaurantInput {
  address: String!
  categoryName: String!
  coverImage: String!
  name: String!
}

type CreateRestaurantOutput {
  error: String
  ok: Boolean!
  restaurant: Restaurant
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeleteDishInput {
  dishId: UUID!
}

type DeleteDishOutput {
  dish: Dish
  error: String
  ok: Boolean!
}

input DeleteRestaurantInput {
  restaurantId: UUID!
}

type DeleteRestaurantOutput {
  error: String
  ok: Boolean!
  restaurant: Restaurant
}

type Dish {
  createdAt: DateTime!
  deletedAt: DateTime
  description: String!
  id: UUID!
  name: String!
  options: [DishOption!]
  photo: String!
  price: Int!
  restaurant: Restaurant!
  updatedAt: DateTime!
}

input DishInputType {
  description: String!
  name: String!
  options: [DishOptionInputType!]
  photo: String!
  price: Int!
  restaurant: RestaurantInputType!
}

type DishOption {
  createdAt: DateTime!
  deletedAt: DateTime
  dish: Dish
  extra: Int
  id: UUID!
  name: String!
  updatedAt: DateTime!
}

input DishOptionInputType {
  dish: DishInputType
  extra: Int = 0
  name: String!
}

"""
A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
"""
scalar EmailAddress @specifiedBy(url: "https://www.w3.org/Protocols/rfc822/")

input LoginInput {
  email: EmailAddress!
  password: String!
}

type LoginOutput {
  accessToken: String
  error: String
  ok: Boolean!
  refreshToken: String
}

type LogoutOutPut {
  error: String
  ok: Boolean!
}

type Mutation {
  createDish(createDishInput: CreateDishInput!): CreateDishOutput!
  createOrder(createOrderInput: CreateOrderInput!): CreateOrderOutput!
  createPayment(createPaymentInput: CreatePaymentInput!): CreatePaymentOutput!
  createRestaurant(createRestaurantInput: CreateRestaurantInput!): CreateRestaurantOutput!
  deleteDish(deleteDishInput: DeleteDishInput!): DeleteDishOutput!
  deleteRestaurant(deleteRestaurantInput: DeleteRestaurantInput!): DeleteRestaurantOutput!
  login(loginInput: LoginInput!): LoginOutput!
  logout: LogoutOutPut!
  refresh: RefreshOutput!
  register(registerInput: RegisterInput!): RegisterOutput!
  takeOrder(takeOrderInput: TakeOrderInput!): TakeOrderOutput!
  updateDish(updateDishInput: UpdateDishInput!): UpdateDishOutput!
  updateOrder(updateOrderInput: UpdateOrderInput!): UpdateOrderOutput!
  updateRestaurant(updateRestaurantInput: UpdateRestaurantInput!): UpdateRestaurantOutput!
}

input MyRestaurantInput {
  id: UUID!
}

type MyRestaurantOutput {
  error: String
  ok: Boolean!
  restaurant: Restaurant
}

type MyRestaurantsOutput {
  error: String
  ok: Boolean!
  restaurants: [Restaurant!]
}

type Order {
  createdAt: DateTime!
  customer: User
  deletedAt: DateTime
  dishes: [Dish!]
  driver: User
  id: UUID!
  restaurant: Restaurant
  status: OrderStatus!
  total: Int
  updatedAt: DateTime!
}

input OrderInput {
  id: UUID!
}

input OrderInputType {
  customer: UserInputType
  dishes: [DishInputType!]
  driver: UserInputType
  restaurant: RestaurantInputType
  status: OrderStatus!
  total: Int
}

type OrderOutput {
  error: String
  ok: Boolean!
  order: Order
}

enum OrderStatus {
  COOKED
  COOKING
  DELIVERED
  PENDING
  PICKEDUP
}

input OrdersInput {
  status: OrderStatus
}

type OrdersOutput {
  error: String
  ok: Boolean!
  orders: [Order!]
}

type Payment {
  createdAt: DateTime!
  deletedAt: DateTime
  id: UUID!
  restaurant: Restaurant!
  restaurantId: String
  transactionId: String!
  updatedAt: DateTime!
  user: User!
}

input PaymentInputType {
  restaurant: RestaurantInputType!
  restaurantId: String
  transactionId: String!
  user: UserInputType!
}

type PendingOrdersOutPut {
  order: Order
  ownerId: String
}

type Query {
  categories: CategoriesOutput!
  category(categoryInput: CategoryInput!): CategoryOutput!
  myRestaurant(myRestaurantInput: MyRestaurantInput!): MyRestaurantOutput!
  myRestaurants: MyRestaurantsOutput!
  order(orderInput: OrderInput!): OrderOutput!
  orders(ordersInput: OrdersInput!): OrdersOutput!
  restaurant(restaurantInput: RestaurantInput!): RestaurantOutput!
  restaurants(restaurantsInput: RestaurantsInput!): RestaurantsOutput!
  searchRestaurant(searchRestaurantInput: SearchRestaurantInput!): SearchRestaurantOutput!
  users: UsersOutput!
}

type RefreshOutput {
  accessToken: String
  error: String
  ok: Boolean!
  refreshToken: String
}

input RegisterInput {
  email: EmailAddress!
  password: String!
}

type RegisterOutput {
  accessToken: String
  error: String
  ok: Boolean!
  refreshToken: String
}

type Restaurant {
  address: String!
  category: Category
  coverImage: String!
  createdAt: DateTime!
  deletedAt: DateTime
  id: UUID!
  isPromoted: Boolean!
  menu: [Dish!]!
  name: String!
  orders: [Order!]
  owner: User!
  promotedUntil: DateTime
  updatedAt: DateTime!
}

input RestaurantInput {
  restaurantId: UUID!
}

input RestaurantInputType {
  address: String!
  category: CategoryInputType
  coverImage: String!
  isPromoted: Boolean = false
  menu: [DishInputType!]!
  name: String!
  orders: [OrderInputType!]
  owner: UserInputType!
  promotedUntil: DateTime
}

type RestaurantOutput {
  error: String
  ok: Boolean!
  restaurant: Restaurant
}

input RestaurantsInput {
  page: Int = 1
  take: Int = 25
}

type RestaurantsOutput {
  error: String
  ok: Boolean!
  restaurants: [Restaurant!]
  totalPages: Int
  totalResults: Int
}

input SearchRestaurantInput {
  page: Int = 1
  query: String!
  take: Int = 25
}

type SearchRestaurantOutput {
  error: String
  ok: Boolean!
  restaurants: [Restaurant!]
  totalPages: Int
  totalResults: Int
}

type Subscription {
  cookedOrders: CookedOrdersOutput!
  pendingOrders: PendingOrdersOutPut!
  updateOrders(updateOrdersInput: UpdateOrdersInput!): UpdateOrdersOutput!
}

input TakeOrderInput {
  id: UUID!
}

type TakeOrderOutput {
  error: String
  ok: Boolean!
  order: Order
}

"""
A field whose value is a generic Universally Unique Identifier: https://en.wikipedia.org/wiki/Universally_unique_identifier.
"""
scalar UUID

input UpdateDishInput {
  description: String
  dishId: UUID!
  name: String
  options: [DishOptionInputType!]
  photo: String
  price: Int
  restaurantId: UUID
}

type UpdateDishOutput {
  dish: Dish
  error: String
  ok: Boolean!
}

input UpdateOrderInput {
  id: UUID!
  status: OrderStatus!
}

type UpdateOrderOutput {
  error: String
  ok: Boolean!
  order: Order
}

input UpdateOrdersInput {
  id: UUID!
}

type UpdateOrdersOutput {
  order: Order
}

input UpdateRestaurantInput {
  address: String
  categoryName: String
  coverImage: String
  name: String
  restaurantId: UUID!
}

type UpdateRestaurantOutput {
  error: String
  ok: Boolean!
  restaurant: Restaurant
}

type User {
  createdAt: DateTime!
  deletedAt: DateTime
  email: EmailAddress!
  id: UUID!
  orders: [Order!]
  payments: [Payment!]
  restaurants: [Restaurant!]
  rides: [Order!]
  role: UserRole!
  updatedAt: DateTime!
  verified: Boolean!
}

input UserInputType {
  email: EmailAddress!
  orders: [OrderInputType!]
  payments: [PaymentInputType!]
  restaurants: [RestaurantInputType!]
  rides: [OrderInputType!]
  role: UserRole!
  verified: Boolean!
}

enum UserRole {
  CLIENT
  DELIVERY
  OWNER
}

type UsersOutput {
  error: String
  ok: Boolean!
  users: [User!]
}