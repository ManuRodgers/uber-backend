# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type CategoriesOutput {
  categories: [Category!]
  error: String
  ok: Boolean!
}

type Category {
  coverImage: String
  createdAt: DateTime!
  deletedAt: DateTime
  id: UUID!
  name: String!
  restaurantCount: Int!
  restaurants: [Restaurant!]
  slug: String!
  updatedAt: DateTime!
}

input CategoryInput {
  categorySlug: String!
  page: Int = 1
  take: Int = 25
}

type CategoryOutput {
  category: Category
  error: String
  ok: Boolean!
  restaurants: [Restaurant!]
  totalPages: Int
  totalResults: Int
}

input CreateRestaurantInput {
  address: String!
  categoryName: String!
  coverImage: String!
  name: String!
}

type CreateRestaurantOutput {
  error: String
  ok: Boolean!
  restaurant: Restaurant
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeleteRestaurantInput {
  restaurantId: UUID!
}

type DeleteRestaurantOutput {
  error: String
  ok: Boolean!
  restaurant: Restaurant
}

"""
A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
"""
scalar EmailAddress @specifiedBy(url: "https://www.w3.org/Protocols/rfc822/")

input LoginInput {
  email: EmailAddress!
  password: String!
}

type LoginOutput {
  accessToken: String
  error: String
  ok: Boolean!
  refreshToken: String
}

type LogoutOutPut {
  error: String
  ok: Boolean!
}

type Mutation {
  createRestaurant(createRestaurantInput: CreateRestaurantInput!): CreateRestaurantOutput!
  deleteRestaurant(deleteRestaurantInput: DeleteRestaurantInput!): DeleteRestaurantOutput!
  login(loginInput: LoginInput!): LoginOutput!
  logout: LogoutOutPut!
  refresh: RefreshOutput!
  register(registerInput: RegisterInput!): RegisterOutput!
  updateRestaurant(updateRestaurantInput: UpdateRestaurantInput!): UpdateRestaurantOutput!
}

input MyRestaurantInput {
  id: UUID!
}

type MyRestaurantOutput {
  error: String
  ok: Boolean!
  restaurant: Restaurant
}

type MyRestaurantsOutput {
  error: String
  ok: Boolean!
  restaurants: [Restaurant!]
}

type Query {
  categories: CategoriesOutput!
  category(categoryInput: CategoryInput!): CategoryOutput!
  myRestaurant(myRestaurantInput: MyRestaurantInput!): MyRestaurantOutput!
  myRestaurants: MyRestaurantsOutput!
  restaurant(restaurantInput: RestaurantInput!): RestaurantOutput!
  restaurants(restaurantsInput: RestaurantsInput!): RestaurantsOutput!
  searchRestaurant(searchRestaurantInput: SearchRestaurantInput!): SearchRestaurantOutput!
  users: UsersOutput!
}

type RefreshOutput {
  accessToken: String
  error: String
  ok: Boolean!
  refreshToken: String
}

input RegisterInput {
  email: EmailAddress!
  password: String!
}

type RegisterOutput {
  accessToken: String
  error: String
  ok: Boolean!
  refreshToken: String
}

type Restaurant {
  address: String!
  category: Category
  coverImage: String!
  createdAt: DateTime!
  deletedAt: DateTime
  id: UUID!
  name: String!
  owner: User!
  updatedAt: DateTime!
}

input RestaurantInput {
  restaurantId: UUID!
}

type RestaurantOutput {
  error: String
  ok: Boolean!
  restaurant: Restaurant
}

input RestaurantsInput {
  page: Int = 1
  take: Int = 25
}

type RestaurantsOutput {
  error: String
  ok: Boolean!
  restaurants: [Restaurant!]
  totalPages: Int
  totalResults: Int
}

input SearchRestaurantInput {
  page: Int = 1
  query: String!
  take: Int = 25
}

type SearchRestaurantOutput {
  error: String
  ok: Boolean!
  restaurants: [Restaurant!]
  totalPages: Int
  totalResults: Int
}

"""
A field whose value is a generic Universally Unique Identifier: https://en.wikipedia.org/wiki/Universally_unique_identifier.
"""
scalar UUID

input UpdateRestaurantInput {
  address: String
  categoryName: String
  coverImage: String
  name: String
  restaurantId: UUID!
}

type UpdateRestaurantOutput {
  error: String
  ok: Boolean!
  restaurant: Restaurant
}

type User {
  createdAt: DateTime!
  deletedAt: DateTime
  email: EmailAddress!
  id: UUID!
  restaurants: [Restaurant!]
  role: UserRole!
  updatedAt: DateTime!
  verified: Boolean!
}

enum UserRole {
  CLIENT
  DELIVERY
  OWNER
}

type UsersOutput {
  error: String
  ok: Boolean!
  users: [User!]
}